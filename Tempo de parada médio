int contar = 0;
unsigned long timer = millis();
unsigned long TempParada = 0; // Tempo de parada do motor
unsigned long UltimaInterrupcao = 0; // Tempo da última interrupção detectada
unsigned long TempoMorto = 0; // Tempo morto, tempo até o motor começar a funcionar novamente
bool motorFuncionando = false; // Flag para saber se o motor começou a funcionar
int RPM = 0; // Velocidade
int RPS = 0;
int verific = 0; // Antigo SetPoint
float setpoint = 0; // Novo SetPoint
float erro = verific - RPM; // Erro Novo
float Ki = 0.2479; // Ganho Integrativo
float Kp = 0.414; // Ganho Proporcional
float Kd = 0.001035; // Ganho Derivativo
float ProporcTerm = Kp * erro; // Variável Proporcional
float IntegralTerm = 0; // Variável Integrativa
float DerivaTerm = 0; // Variável Derivativa
float u = ProporcTerm + IntegralTerm + DerivaTerm; // Ganho
float dT = 1;
float ErroAnt = 0;
float w = 0;
int y = 0;

void setup() {
  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(2), ContadorS, RISING);
  attachInterrupt(digitalPinToInterrupt(3), ContadorP, FALLING);
  Serial.begin(9600);
  pinMode(9, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(8, OUTPUT);
  digitalWrite(8, HIGH);
  digitalWrite(10, LOW);
  analogWrite(9, 255);
}

void loop() {
 
  // Verifica se o motor foi parado por 10 segundos
  if ((millis() - timer) >= 10000 && y == 0) {
    y = 1;
    analogWrite(9, 0);
    TempParada = millis();  // Salva o tempo que o motor foi parado
    motorFuncionando = false; // Marca que o motor está parado
    Serial.print("Motor parado em: ");
    Serial.print(TempParada);
    Serial.println(" ms");
  }
  
  // Verifica se o motor começou a funcionar após o tempo de parada
  if (!motorFuncionando && UltimaInterrupcao > 0) {
    motorFuncionando = true; // Marca que o motor começou a funcionar
    TempoMorto = millis() - TempParada; // Calcula o tempo morto (tempo até começar a funcionar)
    Serial.print("Tempo morto (tempo para o motor começar a funcionar): ");
    Serial.print(TempoMorto);
    Serial.println(" ms");
  }

  // Exibe a última interrupção detectada (se houver)
  if (UltimaInterrupcao > 0) {
    Serial.print("Última interrupção detectada em: ");
    Serial.print(UltimaInterrupcao);
    Serial.println(" ms");
    UltimaInterrupcao = 0;
  }
}

void ContadorS() {
  contar++;
  UltimaInterrupcao = millis(); // Registra o tempo da interrupção
}

void ContadorP() {
  UltimaInterrupcao = millis(); // Registra o tempo da interrupção
}
\item Kp = (T / K * θ) * (1 + (θ / 3 * T )) = 0.0857
\item Ki = Kp / (T * (1 + (2*θ / 3*T))) = 2.4823
\item Kd = Kp *( (θ*T) / (1 + (2*θ / 3*T))) = 0.0355
